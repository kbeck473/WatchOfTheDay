version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: watchdb
      POSTGRES_USER: watchuser
      POSTGRES_PASSWORD: watchpass
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 2s
      timeout: 5s
      retries: 15

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PGHOST: db
      PGUSER: watchuser
      PGPASSWORD: watchpass
      PGDATABASE: watchdb
      PGPORT: 5432
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"

  web:
  build:
    context: ./frontend
    dockerfile: Dockerfile
  # Let Docker inject tini as PID 1 so signals are handled cleanly
  init: true

  # Ask nginx to quit gracefully (SIGQUIT), and don’t wait forever
  stop_signal: SIGQUIT
  stop_grace_period: 10s

  # Avoid auto-restart loops that make “stop” feel impossible
  restart: "no"

  depends_on:
    api:
      condition: service_started
  ports:
    - "3000:80"

  # Healthcheck with a hard timeout so it can’t hang
  healthcheck:
    test: ["CMD-SHELL", "wget -qO- --timeout=2 http://localhost || exit 1"]
    interval: 30s
    timeout: 3s
    retries: 3

  # Keep nginx’ temp/cache in memory to reduce overlayfs I/O issues
  tmpfs:
    - /var/cache/nginx
    - /var/run


  seed:
    image: postgres:16-alpine
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: watchpass
    volumes:
      - ./backend/seed.sql:/seed.sql:ro
    command: >
      sh -c "psql -h db -U watchuser -d watchdb -v ON_ERROR_STOP=1 -f /seed.sql"
    restart: "no"

volumes:
  db-data:
